

ds2_options scond=none;
/* Model Linear Regression (Pipeline 1) version 1.1 retrieved on Mon Nov 27 15:55:09 UTC 2023 */ 
/* PACKAGE_START: packageName="autoAuctionDec_Linearu32Regressionu32u40Pipelineu321u41", referencedBy=autoAuctionDec, name=Linear Regression (Pipeline 1), nodeId=b75331cd-f57f-479c-8de2-afabb4813d9f, objectUri=/modelRepository/models/873a3528-7945-4e3a-80dc-11f93f56b5d1 */
/*----------------------------------------------------------------------------------*/
/* Product:            Visual Data Mining and Machine Learning                      */
/* Release Version:    V2022.09                                                     */
/* Component Version:  V2022.09                                                     */
/* CAS Version:        V.04.00M0P09192022                                           */
/* SAS Version:        V.04.00M0P091922                                             */
/* Site Number:        70180938                                                     */
/* Host:               sas-cas-server-default-client                                */
/* Encoding:           utf-8                                                        */
/* Java Encoding:      UTF8                                                         */
/* Locale:             en_US                                                        */
/* Project GUID:       ea1d8e57-b1a9-4964-84c2-e088999385ea                         */
/* Node GUID:          ec4dc9de-322c-43b7-aa5f-63385e248967                         */
/* Node Id:            DZMQ9L6RHK6P98COBXCJVDV1J                                    */
/* Algorithm:          Linear Regression                                            */
/* Generated by:       geldmui@gelenable.sas.com                                    */
/* Date:               17NOV2022:04:28:19                                           */
/*----------------------------------------------------------------------------------*/
package "autoAuctionDec_Linearu32Regressionu32u40Pipelineu321u41" / overwrite=yes;
   dcl double "Miles";
   dcl double "P_BlueBookPrice" having label n'Predicted: BlueBookPrice';
   dcl double "EM_PREDICTION";
   varlist allvars [_all_];

   method _DZMQ9L6RHK6P98COBXCJVDV1J();
      dcl double _J_;
      dcl double _I_;
      dcl double _TEMP_;
      dcl double _LINP_;
      dcl double _BADVAL_;
      dcl nchar(6) _MILES_;
      dcl double _BETA_77138452_0_[14];
      dcl double _XROW_77138452_0_[14];

      _BETA_77138452_0_:=(11999.9999999999, 23000, 68000, 16000, 28000, -6999.99999999998,
      -3999.99999999998, 0, 0, 1.6608936448392E-11, -3999.99999999998, 0, 0,
      0);
      _BADVAL_ = 0.0;
      _LINP_ = 0.0;
      _TEMP_ = 0.0;
      _I_ = 0.0;
      _J_ = 0.0;
      _MILES_ = LEFT(TRIM(put(MILES, BEST6.)));
      do _I_ = 1.0 to 14.0;
      _XROW_77138452_0_[_I_] = 0.0;
      end;
      _XROW_77138452_0_[1.0] = 1.0;
      _TEMP_ = 1.0;
      select (_MILES_);
      when ('4000') _XROW_77138452_0_[2.0] = _TEMP_;
      when ('5000') _XROW_77138452_0_[3.0] = _TEMP_;
      when ('20000') _XROW_77138452_0_[4.0] = _TEMP_;
      when ('40000') _XROW_77138452_0_[5.0] = _TEMP_;
      when ('50000') _XROW_77138452_0_[6.0] = _TEMP_;
      when ('59000') _XROW_77138452_0_[7.0] = _TEMP_;
      when ('68000') _XROW_77138452_0_[8.0] = _TEMP_;
      when ('70000') _XROW_77138452_0_[9.0] = _TEMP_;
      when ('80000') _XROW_77138452_0_[10.0] = _TEMP_;
      when ('82000') _XROW_77138452_0_[11.0] = _TEMP_;
      when ('90000') _XROW_77138452_0_[12.0] = _TEMP_;
      when ('100000') _XROW_77138452_0_[13.0] = _TEMP_;
      when ('270000') _XROW_77138452_0_[14.0] = _TEMP_;
      otherwise do ;
      _BADVAL_ = 1.0;
      goto SKIP_77138452_0;
      end;
      end;
      do _I_ = 1.0 to 14.0;
      _LINP_ + _XROW_77138452_0_[_I_] * _BETA_77138452_0_[_I_];
      end;
      SKIP_77138452_0: if (_BADVAL_ = 0.0) & ^MISSING(_LINP_) then do ;
      P_BLUEBOOKPRICE = _LINP_;
      end;
      else do ;
      _LINP_ = .;
      P_BLUEBOOKPRICE = .;
      end;
      if "P_BLUEBOOKPRICE" = . then "P_BLUEBOOKPRICE" = 22142.857143;
      EM_PREDICTION = "P_BLUEBOOKPRICE";

   end;

   method score(
      double "Miles",
      IN_OUT double "EM_PREDICTION",
      IN_OUT double "P_BlueBookPrice"
   );
      this."Miles"= "Miles";

      _DZMQ9L6RHK6P98COBXCJVDV1J();

      "EM_PREDICTION"= this."EM_PREDICTION";
      "P_BlueBookPrice"= this."P_BlueBookPrice";
   end;

   method predictedscore(
      double "Miles",
      IN_OUT double "EM_PREDICTION",
      IN_OUT double "P_BlueBookPrice"
   );
      this."Miles"= "Miles";

      _DZMQ9L6RHK6P98COBXCJVDV1J();

      "EM_PREDICTION"= this."EM_PREDICTION";
      "P_BlueBookPrice"= this."P_BlueBookPrice";
   end;

/* PACKAGE_END: "autoAuctionDec_Linearu32Regressionu32u40Pipelineu321u41" */
endpackage;

ds2_options scond=WARNING;
/* Rule Set autoAuctionMake version 1.0 generated on Mon Nov 27 15:55:09 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;
DS2_OPTIONS MISSING_NOTE;

/* PACKAGE_START: packageName="autoAuctionDec_autoAuctionMake_1_0", referencedBy=autoAuctionDec, name=autoAuctionMake, nodeId=23edd00c-5b27-4726-935a-a6b076b60018, objectUri=/businessRules/ruleSets/78c92f4d-7aeb-43c8-a730-3a06308fdbb8/revisions/01086e05-02ba-4e80-8ba6-e36caae58215 */
  package "autoAuctionDec_autoAuctionMake_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

      dcl varchar(512)   lookup_value;

      dcl varchar(256)   lookup_key;
      dcl package datagrid lookup_0 ('lookup_0'); /* lookup for $LJS6EWUUOMJGPVB347TSMI7QXBA_K */
      dcl package datagrid lookup_1 ('lookup_1'); /* lookup for $LYRS5R6VLUJB7DIVDMJWWD7RBUE_K */

      /* for inline lookups we initialize datagrids in the package constructor */
      forward DataGrid_create;
      forward DataGrid_FilteredGet;
      method "autoAuctionDec_autoAuctionMake_1_0"();

            /* lookup: $LJS6EWUUOMJGPVB347TSMI7QXBA_K */
            DataGrid_create(lookup_0, '[{"metadata":[{"key":"string"},{"value":"string"}]}, {"data":[
["0","Do NOT bid on this car!"],["1","Bid on the car!"]]}]');

            /* lookup: $LYRS5R6VLUJB7DIVDMJWWD7RBUE_K */
            DataGrid_create(lookup_1, '[{"metadata":[{"key":"string"},{"value":"string"}]}, {"data":[
["Buick","Buick"],["Scion","Scion"]]}]');

      end;

      method getLookupValue() returns varchar(512);
        return lookup_value;
      end;

      method doLookupFind(varchar(256) lookupKey, varchar(100) lookupName) returns int;
        dcl integer rc;
        rc = 1;
        lookup_value = '';
        if ( not missing(lookupKey) ) then do;

                lookup_key = strip(lookupkey);

                select(lookupName);
                  when('$LJS6EWUUOMJGPVB347TSMI7QXBA_K.') lookup_value = DataGrid_FilteredGet(lookup_0, 'value', 'key', 'eq', lookup_key);
                  when('$LYRS5R6VLUJB7DIVDMJWWD7RBUE_K.') lookup_value = DataGrid_FilteredGet(lookup_1, 'value', 'key', 'eq', lookup_key);
                end;

                if ( not missing(lookup_value) ) then do;
                  rc = 0;
                end;
        end;

        return rc;
      end;

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

method DataGrid_create(package datagrid aGrid,
varchar(10485760) JSONTableString)
returns int;
    dcl int rowCnt;    
    rowCnt = aGrid.deserialize(JSONTableString);
    if (rowCnt = 0) then
        rowCnt = aGrid.rowCount();
    return rowCnt;    
end;

method DataGrid_FilteredGet(package datagrid aGrid,
varchar(255) srcCol,
varchar(255) cmpCol,
char(2)      cmpOp,
varchar(32767) cmpVal)
returns varchar;
    dcl varchar(32767) colVal;
    colVal = aGrid.filteredGet(cmpCol, cmpOp, cmpVal, srcCol);
    return colVal;
end;

method DataGrid_FilteredGet(package datagrid aGrid,
varchar(255) srcCol,
varchar(255) cmpCol,
char(2)      cmpOp,
varchar(32767) cmpVal,
int start_row,
int end_row)
returns varchar;
    dcl varchar(32767) colVal;
    colVal = aGrid.filteredGet(cmpCol, cmpOp, cmpVal, srcCol,start_row,end_row);
    return colVal;
end;

    method execute( in_out double "Bid",in_out varchar "bidCommand",in_out double "BlueBookPrice",in_out double "callOffice",in_out double "CurrentBid",in_out varchar "Make",in_out double "Miles",in_out varchar "Model",in_out double "OriginalInvoice",in_out double "OriginalMSRP",in_out varchar "state",in_out varchar "VIN",in_out double "Year");

;
         if (0 = doLookupFind("Make",'$LYRS5R6VLUJB7DIVDMJWWD7RBUE_K.')) then do;
         "Bid" = 0 ;

goto "end_daef7833-d036-45cf-ae76-c1e508d02f34";end;
         else do;
         "Bid" = 1 ;

         end;

         "end_daef7833-d036-45cf-ae76-c1e508d02f34":

         if(doLookupFind(Bid,'$LJS6EWUUOMJGPVB347TSMI7QXBA_K.') in (0, 2)) then;"bidCommand" = getLookupValue();;

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "autoAuctionDec_autoAuctionMake_1_0" */
  endpackage;
ds2_options scond=WARNING;
/* Rule Set autoAuction version 1.0 generated on Mon Nov 27 15:55:09 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;
DS2_OPTIONS MISSING_NOTE;

/* PACKAGE_START: packageName="autoAuctionDec_autoAuction_1_0", referencedBy=autoAuctionDec, name=autoAuction, nodeId=45da8736-1ef3-421a-90af-9e826b0f7a4f, objectUri=/businessRules/ruleSets/99fff56f-43f4-4e73-b4b9-0c03a0dd8c39/revisions/83e222b2-85b0-4f9e-872d-494add2374fc */
  package "autoAuctionDec_autoAuction_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "Bid",in_out double "BlueBookPrice",in_out double "callOffice",in_out double "CurrentBid",in_out varchar "Make",in_out double "Miles",in_out varchar "Model",in_out double "OriginalInvoice",in_out double "OriginalMSRP",in_out varchar "state",in_out varchar "VIN",in_out double "Year");

;
         "Bid" = 0 ;

         "callOffice" = 0 ;

         if ("CurrentBid" < "BlueBookPrice") AND ("Miles" < 50000.0) then do;
         "Bid" = 1 ;

goto "end_b25c1f7e-1d07-4058-894e-aa310005d08b";
end;
         if (CurrentBid < 1.2*BlueBookPrice) AND ("Miles" < 10000.0) then do;
         "Bid" = 1 ;

         end;

         "end_b25c1f7e-1d07-4058-894e-aa310005d08b":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "autoAuctionDec_autoAuction_1_0" */
  endpackage;
ds2_options scond=WARNING;
/* PACKAGE_START: packageName="autoAuctionDec_californiaOverride_1_0", referencedBy=autoAuctionDec, name=californiaOverride, nodeId=135a42da-45a6-4e4f-b7c5-f2c50e684712, objectUri=/decisions/codeFiles/4eb2121a-9503-4d16-9f01-c761f88214e6/revisions/de7944d7-9ca0-438c-954c-e6c08055bd78 */
/* Custom Object californiaOverride retrieved on Mon Nov 27 15:55:09 UTC 2023 */ 
package "autoAuctionDec_californiaOverride_1_0" /inline;
   method execute(in_out double Bid,
                  in_out varchar bidCommand,
                  in_out varchar state);
    if state = 'CA' then do;
       Bid = 1;
       bidCommand = 'Buy anything from California!';
   end;
   end;
/* PACKAGE_END: "autoAuctionDec_californiaOverride_1_0" */
endpackage;

  DS2_OPTIONS LOGICALEXPR = STANDARD;
  DS2_OPTIONS SCOND = WARNING;
  DS2_OPTIONS MISSING_NOTE;

/* Decision autoAuctionDec version 1.0 generated on Mon Nov 27 15:55:09 UTC 2023 */
/* {PACKAGE_START} */
  package autoAuctionDec1_0  / inline;
    dcl package logger logr_ppn('App.tk.SID.Ppn');
    dcl package logger logr_perf('App.tk.SID.Perf');
    dcl double timer_start;
    dcl double elapsed_time;
    dcl double total_timer_start;
    dcl double total_elapsed_time;

    dcl package "autoAuctionDec_Linearu32Regressionu32u40Pipelineu321u41" "autoAuctionDec_Linearu32Regressionu32u40Pipelineu321u41_hdl"();
    dcl package "autoAuctionDec_autoAuctionMake_1_0" "autoAuctionDec_autoAuctionMake_1_0_hdl"();
    dcl package "autoAuctionDec_autoAuction_1_0" "autoAuctionDec_autoAuction_1_0_hdl"();
    dcl package "autoAuctionDec_californiaOverride_1_0" "autoAuctionDec_californiaOverride_1_0_hdl"();

     method init();

     end;

    method execute_internal(
       in_out double "BlueBookPrice"
      ,in_out double "CurrentBid"
      ,in_out varchar "Make"
      ,in_out double "Miles"
      ,in_out varchar "Model"
      ,in_out double "OriginalInvoice"
      ,in_out double "OriginalMSRP"
      ,in_out varchar "VIN"
      ,in_out double "Year"
      ,in_out varchar "state"
      ,in_out double "Bid"
      ,in_out double "EM_PREDICTION"
      ,in_out double "P_BlueBookPrice"
      ,in_out varchar "bidCommand"
      ,in_out double "callOffice"

      ,in_out integer "_filter_"

    );
        dcl integer dg_filter_;

       dcl integer _masRC;

        total_timer_start = datetime();

        timer_start = datetime();
        "autoAuctionDec_Linearu32Regressionu32u40Pipelineu321u41_hdl".score("Miles", "EM_PREDICTION", "P_BlueBookPrice");

        elapsed_time = datetime() - timer_start;
        logr_perf.log( 'd', 'Package Name: autoAuctionDec1_0, Node Name: Linear Regression (Pipeline 1), Node ID: b75331cd-f57f-479c-8de2-afabb4813d9f, NODE DURATION: ' .. elapsed_time);

/*model code*/;

        /*begin branch node*/
        if ( "state" eq 'PA' )
         then do;

             timer_start = datetime();
             "autoAuctionDec_autoAuctionMake_1_0_hdl".execute("Bid", "bidCommand", "BlueBookPrice", "callOffice", "CurrentBid", "Make", "Miles", "Model", "OriginalInvoice", "OriginalMSRP", "state", "VIN", "Year");

             elapsed_time = datetime() - timer_start;
             logr_perf.log( 'd', 'Package Name: autoAuctionDec1_0, Node Name: autoAuctionMake, Node ID: 23edd00c-5b27-4726-935a-a6b076b60018, NODE DURATION: ' .. elapsed_time);

        end;

        else do;

             timer_start = datetime();
             "autoAuctionDec_autoAuction_1_0_hdl".execute("Bid", "EM_PREDICTION", "callOffice", "CurrentBid", "Make", "Miles", "Model", "OriginalInvoice", "OriginalMSRP", "state", "VIN", "Year");

             elapsed_time = datetime() - timer_start;
             logr_perf.log( 'd', 'Package Name: autoAuctionDec1_0, Node Name: autoAuction, Node ID: 45da8736-1ef3-421a-90af-9e826b0f7a4f, NODE DURATION: ' .. elapsed_time);

        end;

        /*end branch node*/

        timer_start = datetime();
        "autoAuctionDec_californiaOverride_1_0_hdl".execute("Bid", "bidCommand", "state");

        elapsed_time = datetime() - timer_start;
        logr_perf.log( 'd', 'Package Name: autoAuctionDec1_0, Node Name: californiaOverride, Node ID: 135a42da-45a6-4e4f-b7c5-f2c50e684712, NODE DURATION: ' .. elapsed_time);

        "end":/*label for decision node link to flow end*/

        total_elapsed_time = datetime() - total_timer_start;
        logr_perf.log( 'd', 'Package Name: autoAuctionDec1_0, TOTAL DURATION: ' .. total_elapsed_time);

     end;

    method execute(
       double "BlueBookPrice_"
      ,double "CurrentBid_"
      ,varchar(20) "Make_"
      ,double "Miles_"
      ,varchar(20) "Model_"
      ,double "OriginalInvoice_"
      ,double "OriginalMSRP_"
      ,varchar(17) "VIN_"
      ,double "Year_"
      ,varchar(2) "state_"
      ,in_out double "Bid"
      ,in_out double "BlueBookPrice"
      ,in_out double "CurrentBid"
      ,in_out double "EM_PREDICTION"
      ,in_out varchar "Make"
      ,in_out double "Miles"
      ,in_out varchar "Model"
      ,in_out double "OriginalInvoice"
      ,in_out double "OriginalMSRP"
      ,in_out double "P_BlueBookPrice"
      ,in_out varchar "VIN"
      ,in_out double "Year"
      ,in_out varchar "bidCommand"
      ,in_out double "callOffice"
      ,in_out varchar "state"
);

      dcl integer _filter_;

          "BlueBookPrice" = "BlueBookPrice_";
      "CurrentBid" = "CurrentBid_";
      "Make" = "Make_";
      "Miles" = "Miles_";
      "Model" = "Model_";
      "OriginalInvoice" = "OriginalInvoice_";
      "OriginalMSRP" = "OriginalMSRP_";
      "VIN" = "VIN_";
      "Year" = "Year_";
      "state" = "state_";

          execute_internal(
          "BlueBookPrice"
         ,"CurrentBid"
         ,"Make"
         ,"Miles"
         ,"Model"
         ,"OriginalInvoice"
         ,"OriginalMSRP"
         ,"VIN"
         ,"Year"
         ,"state"
         ,"Bid"
         ,"EM_PREDICTION"
         ,"P_BlueBookPrice"
         ,"bidCommand"
         ,"callOffice"
      ,"_filter_"
      );

    end;

    /* {PACKAGE_END} */
      endpackage;
